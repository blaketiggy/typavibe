---
import Layout from '../../../layouts/Layout.astro';

const { user, collection } = Astro.params;
---

<Layout title="Edit Collection - TypaVibe">
  <main>
    <!-- Breadcrumbs -->
    <nav class="breadcrumbs">
      <a href="/" class="breadcrumb-link">Home</a>
      <span class="breadcrumb-separator">/</span>
      <a href="/${userSlug}" class="breadcrumb-link" id="breadcrumb-username">Loading...</a>
      <span class="breadcrumb-separator">/</span>
      <span class="breadcrumb-current" id="breadcrumb-collection">Loading...</span>
      <span class="breadcrumb-separator">/</span>
      <span class="breadcrumb-current">Edit</span>
    </nav>
    
    <header>
      <h1 id="edit-title">Edit Collection</h1>
    </header>
    
    <!-- Simple collection details -->
    <div style="margin-bottom: 32px;">
      <h2 id="collection-title">Loading...</h2>
      <p id="collection-description" style="color: var(--color-text-secondary);">Loading...</p>
    </div>
    
    <!-- Step-by-step add item section -->
    <section class="add-item-section">
      <h2>Add Items</h2>
      
      <!-- Add Item Button -->
      <button id="add-item-btn" class="btn-primary">
        âž• Add Item
      </button>
      
      <!-- Step-by-step form (hidden initially) -->
      <div id="add-item-form" class="step-form" style="display: none;">
        <div class="step" id="step-url">
          <label>Product URL</label>
          <input 
            id="item-url" 
            placeholder="Paste product URL here..." 
            type="url" 
            required 
          />
          <div class="step-buttons">
            <button type="button" class="btn-secondary" onclick="cancelAddItem()">Cancel</button>
            <button type="button" class="btn-primary" onclick="nextStep('title')">Next</button>
          </div>
        </div>
        
        <div class="step" id="step-title" style="display: none;">
          <label>Item Title (optional)</label>
          <input 
            id="item-title" 
            placeholder="Leave blank to use website title" 
          />
          <div class="step-buttons">
            <button type="button" class="btn-secondary" onclick="prevStep('url')">Back</button>
            <button type="button" class="btn-primary" onclick="nextStep('notes')">Next</button>
          </div>
        </div>
        
        <div class="step" id="step-notes" style="display: none;">
          <label>Notes (optional)</label>
          <textarea 
            id="item-notes" 
            placeholder="Add any notes about this item..."
            rows="3"
          ></textarea>
          <div class="step-buttons">
            <button type="button" class="btn-secondary" onclick="prevStep('title')">Back</button>
            <button type="button" class="btn-primary" onclick="nextStep('price')">Next</button>
          </div>
        </div>
        
        <div class="step" id="step-price" style="display: none;">
          <label>Price (optional)</label>
          <input 
            id="item-price" 
            placeholder="e.g., $29.99" 
            type="text"
          />
          <div class="step-buttons">
            <button type="button" class="btn-secondary" onclick="prevStep('notes')">Back</button>
            <button type="button" class="btn-primary" onclick="addItem()">Add Item</button>
          </div>
        </div>
      </div>
    </section>
    
    <!-- Items list appears here -->
    <div id="items-list" style="margin-top: 32px;">
      <p style="text-align: center; color: var(--color-text-secondary);">No items yet. Add your first item above!</p>
    </div>
    
    <div style="margin-top: 48px; text-align: center;">
      <button id="publish-btn" class="btn-primary">
        ðŸš€ Publish & Share
      </button>
      <button onclick="window.location.href='/'" class="btn-secondary" style="margin-left: 12px;">
        Back to Home
      </button>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from '../../../lib/supabase.js';
  import { anonymousSession } from '../../../lib/anonymous.js';
  
  let currentCollection = null;
  let currentUser = null;
  let userSlug = null;
  let collectionSlug = null;
  
  // Initialize
  async function initialize() {
    // Get user and collection from URL path
    const pathParts = window.location.pathname.split('/');
    userSlug = pathParts[2]; // /edit/[user]/[collection]
    collectionSlug = pathParts[3];
    
    console.log('Edit page - pathParts:', pathParts);
    console.log('Edit page - user:', userSlug, 'collection:', collectionSlug);
    
    // Handle malformed URLs
    if (!userSlug || !collectionSlug) {
      console.error('Malformed URL - missing user or collection slug');
      alert('Invalid URL. Please create a new collection.');
      window.location.href = '/create';
      return;
    }
    
    // Update breadcrumbs
    updateBreadcrumbs();
    
    // Load collection
    await loadCollection();
    
    // Load items
    await loadItems();
  }
  
  function updateBreadcrumbs() {
    const usernameElement = document.getElementById('breadcrumb-username');
    const collectionElement = document.getElementById('breadcrumb-collection');
    
    // Set username breadcrumb
    if (userSlug === 'anonymous') {
      usernameElement.textContent = 'Anonymous';
    } else {
      usernameElement.textContent = userSlug;
    }
    
    // Set collection breadcrumb
    collectionElement.textContent = collectionSlug.replace(/-/g, ' ');
  }
  
  async function loadCollection() {
    try {
      if (userSlug === 'anonymous') {
        // Load from localStorage
        const anonCollection = anonymousSession.getCollectionBySlug(collectionSlug);
        if (anonCollection) {
          currentCollection = anonCollection;
          console.log('Loaded anonymous collection:', anonCollection);
        }
      } else {
        // Load from database
        console.log('Loading collection from database for user:', userSlug, 'slug:', collectionSlug);
        
        const { data: collection, error } = await supabase
          .from('collections')
          .select('*')
          .eq('slug', collectionSlug)
          .single();
        
        console.log('Database query result:', { collection, error });
        
        if (collection && !error) {
          currentCollection = collection;
          console.log('Loaded collection from database:', collection);
        } else if (error) {
          console.error('Error loading collection from database:', error);
          // Try to load from localStorage as fallback
          const anonCollection = anonymousSession.getCollectionBySlug(collectionSlug);
          if (anonCollection) {
            currentCollection = anonCollection;
            console.log('Loaded collection from localStorage as fallback:', anonCollection);
          }
        }
      }
      
      if (currentCollection) {
        document.getElementById('collection-title').textContent = currentCollection.title;
        document.getElementById('collection-description').textContent = currentCollection.description || 'No description';
      } else {
        console.error('No collection found for slug:', collectionSlug);
        alert('Collection not found. Please create a new collection.');
        window.location.href = '/create';
      }
      
    } catch (error) {
      console.error('Error loading collection:', error);
      alert('Error loading collection. Please try again.');
      window.location.href = '/create';
    }
  }
  
  async function loadItems() {
    const itemsContainer = document.getElementById('items-list');
    
    if (userSlug === 'anonymous') {
      // Load from localStorage
      const items = currentCollection?.items || [];
      
      if (items.length === 0) {
        itemsContainer.innerHTML = `
          <p style="text-align: center; color: var(--color-text-secondary);">
            No items yet. Add your first item above!
          </p>
        `;
        return;
      }
      
      itemsContainer.innerHTML = items.map((item, index) => `
        <div class="item" data-index="${index}">
          <div class="item-content">
            <h3>${item.title}</h3>
            ${item.description ? `<p>${item.description}</p>` : ''}
            ${item.price ? `<span class="price">${item.price}</span>` : ''}
          </div>
          <button onclick="deleteItem(${index})" class="btn-secondary delete-btn">
            Delete
          </button>
        </div>
      `).join('');
    } else {
      // Load from database
      try {
        console.log('Loading items from database for collection:', currentCollection.id);
        
        const { data: items, error } = await supabase
          .from('collection_items')
          .select('*')
          .eq('collection_id', currentCollection.id)
          .order('created_at', { ascending: true });
        
        if (error) {
          console.error('Error loading items:', error);
          itemsContainer.innerHTML = `
            <p style="text-align: center; color: var(--color-error);">
              Error loading items: ${error.message}
            </p>
          `;
          return;
        }
        
        console.log('Loaded items from database:', items);
        
        if (!items || items.length === 0) {
          itemsContainer.innerHTML = `
            <p style="text-align: center; color: var(--color-text-secondary);">
              No items yet. Add your first item above!
            </p>
          `;
          return;
        }
        
        itemsContainer.innerHTML = items.map((item, index) => `
          <div class="item" data-item-id="${item.id}">
            <div class="item-content">
              <h3>${item.title || 'Untitled'}</h3>
              ${item.description ? `<p>${item.description}</p>` : ''}
              ${item.price ? `<span class="price">${item.price}</span>` : ''}
            </div>
            <button onclick="deleteItem('${item.id}')" class="btn-secondary delete-btn">
              Delete
            </button>
          </div>
        `).join('');
      } catch (error) {
        console.error('Error loading items:', error);
        itemsContainer.innerHTML = `
          <p style="text-align: center; color: var(--color-error);">
            Error loading items: ${error.message}
          </p>
        `;
      }
    }
  }
  
  // Add item flow functions
  function nextStep(step) {
    // Hide current step
    const currentStep = document.querySelector('.step[style*="display: block"]');
    if (currentStep) {
      currentStep.style.display = 'none';
    }
    
    // Show next step
    document.getElementById(`step-${step}`).style.display = 'block';
  }
  
  function prevStep(step) {
    // Hide current step
    const currentStep = document.querySelector('.step[style*="display: block"]');
    if (currentStep) {
      currentStep.style.display = 'none';
    }
    
    // Show previous step
    document.getElementById(`step-${step}`).style.display = 'block';
  }
  
  function cancelAddItem() {
    // Hide form
    document.getElementById('add-item-form').style.display = 'none';
    document.getElementById('add-item-btn').style.display = 'block';
    
    // Clear inputs
    document.getElementById('item-url').value = '';
    document.getElementById('item-title').value = '';
    document.getElementById('item-notes').value = '';
    document.getElementById('item-price').value = '';
    
    // Reset to first step
    document.querySelectorAll('.step').forEach(step => {
      step.style.display = 'none';
    });
    document.getElementById('step-url').style.display = 'block';
  }
  
  async function addItem() {
    const url = document.getElementById('item-url').value;
    const title = document.getElementById('item-title').value;
    const notes = document.getElementById('item-notes').value;
    const price = document.getElementById('item-price').value;
    
    if (!url) {
      alert('Please enter a URL');
      return;
    }
    
    // Extract title from URL if not provided
    let itemTitle = title;
    if (!itemTitle) {
      try {
        const urlObj = new URL(url);
        itemTitle = urlObj.hostname.replace('www.', '');
      } catch (e) {
        itemTitle = 'Untitled Item';
      }
    }
    
    const newItem = {
      url: url,
      title: itemTitle,
      description: notes,
      price: price
    };
    
    console.log('Adding item:', newItem);
    console.log('Current collection:', currentCollection);
    
    // Add to collection
    if (!currentCollection.items) {
      currentCollection.items = [];
    }
    currentCollection.items.push(newItem);
    
    // Save to storage
    if (userSlug === 'anonymous') {
      anonymousSession.updateCollection(collectionSlug, {
        items: currentCollection.items
      });
      console.log('Saved to localStorage');
    } else {
      // Save to database
      try {
        console.log('Saving to database with collection_id:', currentCollection.id);
        
        const { data, error } = await supabase
          .from('collection_items')
          .insert({
            collection_id: currentCollection.id,
            url: newItem.url,
            title: newItem.title,
            description: newItem.description,
            price: newItem.price
          })
          .select();
        
        if (error) {
          console.error('Error saving item to database:', error);
          alert('Error saving item: ' + error.message);
          return;
        } else {
          console.log('Item saved successfully:', data);
        }
      } catch (error) {
        console.error('Error saving item:', error);
        alert('Error saving item: ' + error.message);
        return;
      }
    }
    
    // Reset form and reload items
    cancelAddItem();
    await loadItems();
  }
  
  async function deleteItem(itemId) {
    if (confirm('Are you sure you want to delete this item?')) {
      if (userSlug === 'anonymous') {
        // Delete from localStorage
        currentCollection.items.splice(itemId, 1);
        anonymousSession.updateCollection(collectionSlug, {
          items: currentCollection.items
        });
      } else {
        // Delete from database
        try {
          console.log('Deleting item from database:', itemId);
          
          const { error } = await supabase
            .from('collection_items')
            .delete()
            .eq('id', itemId);
          
          if (error) {
            console.error('Error deleting item:', error);
            alert('Error deleting item: ' + error.message);
            return;
          } else {
            console.log('Item deleted successfully');
          }
        } catch (error) {
          console.error('Error deleting item:', error);
          alert('Error deleting item: ' + error.message);
          return;
        }
      }
      
      await loadItems();
    }
  }
  
  async function publishCollection() {
    try {
      // Redirect to the published collection
      const publishedUrl = `/${userSlug}/${collectionSlug}`;
      window.location.href = publishedUrl;
    } catch (error) {
      console.error('Error publishing collection:', error);
      alert('Error publishing collection. Please try again.');
    }
  }
  
  // Event listeners
  document.getElementById('add-item-btn').addEventListener('click', () => {
    document.getElementById('add-item-btn').style.display = 'none';
    document.getElementById('add-item-form').style.display = 'block';
  });
  
  document.getElementById('publish-btn').addEventListener('click', publishCollection);
  
  // Make functions globally accessible
  window.nextStep = nextStep;
  window.prevStep = prevStep;
  window.cancelAddItem = cancelAddItem;
  window.addItem = addItem;
  window.deleteItem = deleteItem;
  window.publishCollection = publishCollection;
  
  // Initialize
  initialize();
</script>

<style>
  .add-item-section {
    margin-bottom: 32px;
  }
  
  .step-form {
    margin-top: 16px;
    padding: 20px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius);
    background: var(--color-background-secondary);
  }
  
  .step {
    margin-bottom: 16px;
  }
  
  .step label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--color-text);
  }
  
  .step input,
  .step textarea {
    width: 100%;
    padding: 12px 16px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius-sm);
    background: var(--color-background);
    color: var(--color-text);
    font-size: 16px;
    margin-bottom: 16px;
  }
  
  .step input:focus,
  .step textarea:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 0 3px rgb(37 99 235 / 0.1);
  }
  
  .step-buttons {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
  }
  
  .item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius-sm);
    margin-bottom: 12px;
    background: var(--color-background-secondary);
  }
  
  .item-content h3 {
    margin: 0 0 8px 0;
    color: var(--color-text);
  }
  
  .item-content p {
    margin: 0 0 8px 0;
    color: var(--color-text-secondary);
  }
  
  .item-content .price {
    color: var(--color-accent);
    font-weight: 600;
  }
  
  .delete-btn {
    padding: 8px 16px;
    font-size: 14px;
  }
  
  /* Breadcrumbs */
  .breadcrumbs {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 24px;
    font-size: 14px;
    color: var(--color-text-secondary);
  }
  
  .breadcrumb-link {
    color: var(--color-accent);
    text-decoration: none;
    font-weight: 500;
  }
  
  .breadcrumb-link:hover {
    text-decoration: underline;
  }
  
  .breadcrumb-separator {
    color: var(--color-border);
  }
  
  .breadcrumb-current {
    color: var(--color-text);
    font-weight: 500;
  }
</style> 