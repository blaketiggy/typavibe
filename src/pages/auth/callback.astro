---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Authentication - TypaVibe">
  <main>
    <div class="auth-container">
      <h1>üîê Completing Sign In</h1>
      <p class="subtitle">Please wait while we complete your authentication...</p>
      <div class="loading-spinner"></div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from '../../lib/supabase.js';
  
  async function handleAuthCallback() {
    try {
      const { data, error } = await supabase.auth.getSession();
      
      if (error) {
        throw error;
      }
      
      if (data.session) {
        // User is authenticated
        const user = data.session.user;
        console.log('User authenticated:', user);
        
        // Check if user has a profile
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('id, username')
          .eq('id', user.id)
          .single();
        
        if (!profile && !profileError) {
          // Create profile for new user
          let username = user.user_metadata?.username;
          
          // For Google auth, try to extract username from email or name
          if (!username && user.user_metadata?.email) {
            username = user.user_metadata.email.split('@')[0];
            // Clean username (remove special chars, limit length)
            username = username.replace(/[^a-zA-Z0-9_-]/g, '').substring(0, 20);
            if (username.length < 3) {
              username = `user_${user.id.substring(0, 8)}`;
            }
          }
          
          // Fallback if still no username
          if (!username) {
            username = `user_${user.id.substring(0, 8)}`;
          }
          
          // Ensure username is unique
          let finalUsername = username;
          let counter = 1;
          while (true) {
            const { data: existingUser, error: checkError } = await supabase
              .from('profiles')
              .select('username')
              .eq('username', finalUsername)
              .single();
            
            if (checkError && checkError.code === 'PGRST116') {
              // Username is available
              break;
            } else {
              // Username taken, try with number
              finalUsername = `${username}${counter}`;
              counter++;
            }
          }
          
          const { error: createError } = await supabase
            .from('profiles')
            .insert({
              id: user.id,
              username: finalUsername,
              display_name: user.user_metadata?.full_name || user.user_metadata?.name || finalUsername,
              email: user.email,
              created_at: new Date().toISOString()
            });
          
          if (createError) {
            console.error('Error creating profile:', createError);
          } else {
            console.log('Profile created for user:', finalUsername);
          }
        } else if (profile) {
          console.log('Profile already exists:', profile.username);
        }
        
        // Redirect to dashboard
        window.location.href = '/dashboard';
      } else {
        // No session, redirect to auth
        window.location.href = '/auth';
      }
      
    } catch (error) {
      console.error('Auth callback error:', error);
      alert('Authentication failed. Please try again.');
      window.location.href = '/auth';
    }
  }
  
  // Handle the callback
  handleAuthCallback();
</script>

<style>
  .auth-container {
    max-width: 480px;
    margin: 0 auto;
    padding: 24px;
    text-align: center;
  }
  
  .subtitle {
    color: var(--color-text-secondary);
    margin-bottom: 32px;
  }
  
  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid var(--color-border);
    border-top: 3px solid var(--color-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style> 