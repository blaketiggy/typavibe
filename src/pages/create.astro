---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Create Collection - TypaVibe">
  <main>
    <div class="create-flow">
      <h1>Create Your Collection</h1>
      <p class="subtitle">Start by naming your collection</p>
      
      <form id="create-form">
        <input 
          id="title" 
          name="title" 
          placeholder="Collection title" 
          value={quickTitle}
          required 
        />
        
        <textarea 
          id="description" 
          name="description" 
          placeholder="What's this collection about?"
        ></textarea>
        
        <!-- Tag selection -->
        <div class="tag-selection">
          <label>Tags (optional):</label>
          <div class="tag-options">
            <label class="tag-option">
              <input type="checkbox" value="fashion" />
              <span>Fashion</span>
            </label>
            <label class="tag-option">
              <input type="checkbox" value="tech" />
              <span>Tech</span>
            </label>
            <label class="tag-option">
              <input type="checkbox" value="home" />
              <span>Home</span>
            </label>
            <label class="tag-option">
              <input type="checkbox" value="beauty" />
              <span>Beauty</span>
            </label>
            <label class="tag-option">
              <input type="checkbox" value="fitness" />
              <span>Fitness</span>
            </label>
            <label class="tag-option">
              <input type="checkbox" value="food" />
              <span>Food</span>
            </label>
          </div>
        </div>
        
        <button type="submit" class="btn-primary">
          Create Collection
        </button>
      </form>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from '../lib/supabase.js';
  import { anonymousSession } from '../lib/anonymous.js';
  
  let currentUser = null;
  
  // Check if user is authenticated
  async function checkAuth() {
    const { data: { user } } = await supabase.auth.getUser();
    currentUser = user;
  }
  
  // Get quick title from URL params
  function getQuickTitle() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('title') || '';
  }
  
  // Set quick title if provided
  const quickTitle = getQuickTitle();
  if (quickTitle) {
    document.getElementById('title').value = quickTitle;
  }
  
  document.getElementById('create-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const title = document.getElementById('title').value;
    const description = document.getElementById('description').value;
    
    // Get selected tags
    const selectedTags = [];
    document.querySelectorAll('.tag-option input:checked').forEach(checkbox => {
      selectedTags.push(checkbox.value);
    });
    
    // Create slug from title
    const slug = title.toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^a-z0-9-]/g, '');
    
    try {
      if (currentUser) {
        // Save to database for authenticated user
        const { data: collection, error } = await supabase
          .from('collections')
          .insert({
            user_id: currentUser.id,
            title: title,
            description: description,
            slug: slug,
            tags: selectedTags,
            is_public: true,
            is_anonymous: false
          })
          .select()
          .single();
        
        if (error) {
          throw error;
        }
        
        // Redirect to edit page
        window.location.href = `/edit/${slug}`;
        
      } else {
        // Save to localStorage for anonymous user
        const collection = {
          id: 'anon_' + Date.now(),
          title: title,
          description: description,
          slug: slug,
          tags: selectedTags,
          is_anonymous: true,
          anon_session_id: anonymousSession.getSessionId(),
          items: [],
          view_count: 0,
          created_at: new Date().toISOString()
        };
        
        // Save to localStorage
        anonymousSession.saveAnonymousCollection(collection);
        
        // Redirect to the edit page
        window.location.href = `/edit/${slug}`;
      }
      
    } catch (error) {
      console.error('Error creating collection:', error);
      alert('Error creating collection. Please try again.');
    }
  });
  
  // Initialize auth check
  checkAuth();
</script>

<style>
  .create-flow {
    max-width: 600px;
    margin: 0 auto;
  }
  
  .subtitle {
    text-align: center;
    color: var(--color-text-secondary);
    margin-bottom: 32px;
  }
  
  .tag-selection {
    margin-bottom: 20px;
  }
  
  .tag-selection label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--color-text);
  }
  
  .tag-options {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }
  
  .tag-option {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 6px 12px;
    border: 1.5px solid var(--color-border);
    border-radius: 16px;
    background: var(--color-background-secondary);
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 13px;
  }
  
  .tag-option:hover {
    border-color: var(--color-accent);
    background: rgb(37 99 235 / 0.05);
  }
  
  .tag-option input {
    margin: 0;
  }
  
  .tag-option input:checked + span {
    color: var(--color-accent);
    font-weight: 500;
  }
</style> 