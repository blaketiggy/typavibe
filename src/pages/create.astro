---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Create Collection - TypaVibe">
  <main>
    <div class="create-flow">
      <h1>Create Your Collection</h1>
      <p class="subtitle">Start by naming your collection</p>
      
      <div id="auth-status" style="display: none; margin-bottom: 20px; padding: 12px; border-radius: 6px;"></div>
      
      <form id="create-form">
        <input 
          id="title" 
          name="title" 
          placeholder="Collection title" 
          required 
        />
        
        <textarea 
          id="description" 
          name="description" 
          placeholder="What's this collection about?"
        ></textarea>
        
        <!-- Tag selection -->
        <div class="tag-selection">
          <label>Tags (optional):</label>
          <div class="tag-options">
            <label class="tag-option">
              <input type="checkbox" value="fashion" />
              <span>Fashion</span>
            </label>
            <label class="tag-option">
              <input type="checkbox" value="tech" />
              <span>Tech</span>
            </label>
            <label class="tag-option">
              <input type="checkbox" value="home" />
              <span>Home</span>
            </label>
            <label class="tag-option">
              <input type="checkbox" value="beauty" />
              <span>Beauty</span>
            </label>
            <label class="tag-option">
              <input type="checkbox" value="fitness" />
              <span>Fitness</span>
            </label>
            <label class="tag-option">
              <input type="checkbox" value="food" />
              <span>Food</span>
            </label>
          </div>
        </div>
        
        <button type="submit" class="btn-primary" id="submit-btn">
          Create Collection
        </button>
      </form>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from '../lib/supabase.js';
  import { anonymousSession } from '../lib/anonymous.js';
  
  let currentUser = null;
  let authChecked = false;
  
  // Make anonymousSession globally accessible
  window.anonymousSession = anonymousSession;
  
  // Initialize page
  function initializePage() {
    console.log('Initializing create page...');
    
    // Get quick title from URL params
    const urlParams = new URLSearchParams(window.location.search);
    const quickTitle = urlParams.get('title') || urlParams.get('quick') || '';
    
    if (quickTitle) {
      console.log('Setting quick title:', quickTitle);
      document.getElementById('title').value = quickTitle;
    }
    
    // Initialize auth check
    checkAuth();
  }
  
  // Check if user is authenticated
  async function checkAuth() {
    try {
      console.log('Checking authentication...');
      
      // First check if we have a session
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      console.log('Session check:', { session: !!session, error: sessionError });
      
      if (sessionError) {
        console.error('Session error:', sessionError);
        // Continue as anonymous user
        currentUser = null;
        authChecked = true;
        showAuthStatus('‚ÑπÔ∏è Creating anonymous collection', 'info');
        return;
      }
      
      // Then get the user
      const { data: { user }, error } = await supabase.auth.getUser();
      console.log('User check:', { user: !!user, error });
      
      if (error) {
        console.error('Auth error:', error);
        // Don't show error, just continue as anonymous
        currentUser = null;
        authChecked = true;
        showAuthStatus('‚ÑπÔ∏è Creating anonymous collection', 'info');
        return;
      }
      
      currentUser = user;
      authChecked = true;
      
      if (user) {
        console.log('User authenticated:', user.email);
        console.log('User object:', user);
        
        // Get user profile to get username
        try {
          const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('username')
            .eq('id', user.id)
            .single();
          
          if (profile && !profileError) {
            currentUser.username = profile.username;
            console.log('User username:', profile.username);
          }
        } catch (profileError) {
          console.error('Error getting user profile:', profileError);
        }
        
        showAuthStatus(`‚úÖ Signed in as ${user.email}`, 'success');
      } else {
        console.log('No user authenticated');
        showAuthStatus('‚ÑπÔ∏è Creating anonymous collection', 'info');
      }
      
    } catch (error) {
      console.error('Auth check failed:', error);
      // Don't show error, just continue as anonymous
      currentUser = null;
      authChecked = true;
      showAuthStatus('‚ÑπÔ∏è Creating anonymous collection', 'info');
    }
  }
  
  function showAuthStatus(message, type) {
    const statusDiv = document.getElementById('auth-status');
    statusDiv.textContent = message;
    statusDiv.style.display = 'block';
    
    // Set color based on type
    if (type === 'error') {
      statusDiv.style.background = '#fef2f2';
      statusDiv.style.color = '#dc2626';
      statusDiv.style.border = '1px solid #fecaca';
    } else if (type === 'success') {
      statusDiv.style.background = '#f0fdf4';
      statusDiv.style.color = '#16a34a';
      statusDiv.style.border = '1px solid #bbf7d0';
    } else {
      statusDiv.style.background = '#f0f9ff';
      statusDiv.style.color = '#2563eb';
      statusDiv.style.border = '1px solid #bfdbfe';
    }
  }
  
  document.getElementById('create-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Wait for auth check to complete
    if (!authChecked) {
      console.log('Waiting for auth check...');
      await checkAuth();
    }
    
    const title = document.getElementById('title').value;
    const description = document.getElementById('description').value;
    
    // Get selected tags
    const selectedTags = [];
    document.querySelectorAll('.tag-option input:checked').forEach(checkbox => {
      selectedTags.push(checkbox.value);
    });
    
    // Create slug from title
    const slug = title.toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^a-z0-9-]/g, '');
    
    const submitBtn = document.getElementById('submit-btn');
    const originalText = submitBtn.textContent;
    
    try {
      submitBtn.textContent = 'Creating...';
      submitBtn.disabled = true;
      
      if (!currentUser) {
        // Show gentle nudge for anonymous publishing
        const authStatus = document.getElementById('auth-status');
        authStatus.innerHTML = `
          <div class="auth-nudge">
            <div class="nudge-icon">üìù</div>
            <h3>Publishing Anonymously</h3>
            <p>Your collection will be saved locally and can be shared with a link. You can always sign in later to save it under your username.</p>
            <div class="nudge-actions">
              <button onclick="continueAnonymous()" class="btn-primary">Continue Anonymously</button>
              <button onclick="showSignIn()" class="btn-secondary">Sign In to Save</button>
            </div>
          </div>
        `;
        authStatus.style.display = 'block';
        
        // Reset button state
        const submitBtn = document.getElementById('submit-btn');
        submitBtn.textContent = 'Create Collection';
        submitBtn.disabled = false;
        return;
      }
      
      if (currentUser) {
        // Save to database for authenticated user
        console.log('Creating collection with user:', currentUser.email);
        
        // First, ensure the user profile exists
        try {
          console.log('Checking if profile exists for user:', currentUser.id);
          const { data: existingProfile, error: profileCheckError } = await supabase
            .from('profiles')
            .select('id, username')
            .eq('id', currentUser.id)
            .single();

          console.log('Profile check result:', { existingProfile, profileCheckError });

          if (!existingProfile && !profileCheckError) {
            // Profile doesn't exist, create it
            console.log('Creating user profile...');
            const fallbackUsername = `user_${currentUser.id.substring(0, 8)}`;
            console.log('Using fallback username:', fallbackUsername);

            const { data: newProfile, error: profileCreateError } = await supabase
              .from('profiles')
              .insert({
                id: currentUser.id,
                username: currentUser.username || fallbackUsername,
                display_name: currentUser.username || `User ${currentUser.id.substring(0, 8)}`,
                email: currentUser.email,
                created_at: new Date().toISOString()
              })
              .select()
              .single();

            console.log('Profile creation result:', { newProfile, profileCreateError });

            if (profileCreateError) {
              console.error('Error creating profile:', profileCreateError);
              throw new Error(`Failed to create user profile: ${profileCreateError.message}`);
            }

            // Update currentUser with the new profile info
            if (newProfile) {
              currentUser.username = newProfile.username;
              console.log('Updated currentUser.username to:', currentUser.username);
            }
          } else if (existingProfile) {
            console.log('Profile already exists:', existingProfile);
            // Update currentUser with existing profile info
            currentUser.username = existingProfile.username;
            console.log('Updated currentUser.username to:', currentUser.username);
          } else if (profileCheckError) {
            // Handle the case where the profile doesn't exist but we got an error
            console.log('Profile check error, attempting to create profile...');
            const fallbackUsername = `user_${currentUser.id.substring(0, 8)}`;
            
            const { data: newProfile, error: profileCreateError } = await supabase
              .from('profiles')
              .insert({
                id: currentUser.id,
                username: currentUser.username || fallbackUsername,
                display_name: currentUser.username || `User ${currentUser.id.substring(0, 8)}`,
                email: currentUser.email,
                created_at: new Date().toISOString()
              })
              .select()
              .single();

            console.log('Profile creation result:', { newProfile, profileCreateError });

            if (profileCreateError) {
              console.error('Error creating profile:', profileCreateError);
              throw new Error(`Failed to create user profile: ${profileCreateError.message}`);
            }

            // Update currentUser with the new profile info
            if (newProfile) {
              currentUser.username = newProfile.username;
              console.log('Updated currentUser.username to:', currentUser.username);
            }
          }
        } catch (profileError) {
          console.error('Profile check/create error:', profileError);
          throw new Error(`Profile setup failed: ${profileError.message}`);
        }
        
        // Now create the collection
        console.log('Creating collection with user_id:', currentUser.id);
        console.log('User ID type:', typeof currentUser.id);
        console.log('User ID length:', currentUser.id.length);
        console.log('Collection data:', {
          user_id: currentUser.id,
          title: title,
          description: description,
          slug: slug,
          tags: selectedTags,
          is_public: true,
          is_anonymous: false
        });
        
        // First, let's verify the user exists in the profiles table
        const { data: profileCheck, error: profileCheckError } = await supabase
          .from('profiles')
          .select('id')
          .eq('id', currentUser.id)
          .single();
        
        console.log('Profile check before collection creation:', { profileCheck, profileCheckError });
        
        if (!profileCheck) {
          throw new Error(`User profile not found in database. User ID: ${currentUser.id}`);
        }
        
        const { data: collection, error } = await supabase
          .from('collections')
          .insert({
            user_id: currentUser.id,
            title: title,
            description: description,
            slug: slug,
            tags: selectedTags,
            is_public: true,
            is_anonymous: false
          })
          .select()
          .single();
        
        console.log('Collection creation result:', { collection, error });
        
        if (error) {
          console.error('Collection creation error details:', error);
          throw error;
        }
        
        console.log('Collection created in database:', collection);
        
        // Debug the redirect URL
        console.log('Current user:', currentUser);
        console.log('Username:', currentUser.username);
        console.log('Slug:', slug);
        
        // Ensure we have a username for the redirect
        let redirectUsername = currentUser.username;
        if (!redirectUsername) {
          // Fallback to user ID based username
          redirectUsername = `user_${currentUser.id.substring(0, 8)}`;
          console.log('Using fallback username for redirect:', redirectUsername);
        }
        
        console.log('Final redirect URL:', `/edit/${redirectUsername}/${slug}`);
        
        // Redirect to edit page with proper user structure
        window.location.href = `/edit/${redirectUsername}/${slug}`;
        
      } else {
        // Save to localStorage for anonymous user
        const collection = {
          id: 'anon_' + Date.now(),
          title: title,
          description: description,
          slug: slug,
          tags: selectedTags,
          is_anonymous: true,
          anon_session_id: anonymousSession.getSessionId(),
          items: [],
          view_count: 0,
          created_at: new Date().toISOString()
        };
        
        // Save to localStorage
        anonymousSession.saveAnonymousCollection(collection);
        
        console.log('Collection saved to localStorage:', collection);
        
        // Redirect to the edit page with anonymous structure
        window.location.href = `/edit/anonymous/${slug}`;
      }
      
    } catch (error) {
      console.error('Error creating collection:', error);
      showAuthStatus(`‚ùå Error creating collection: ${error.message}`, 'error');
    } finally {
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    }
  });
  
  // Initialize page
  initializePage();

    // Make functions globally accessible
    window.continueAnonymous = continueAnonymous;
    window.showSignIn = showSignIn;
    
    function continueAnonymous() {
      // Hide the nudge and continue with anonymous collection creation
      const authStatus = document.getElementById('auth-status');
      authStatus.style.display = 'none';
      
      // Continue with the form submission for anonymous user
      createAnonymousCollection();
    }
    
    function showSignIn() {
      // Redirect to auth page
      window.location.href = '/auth';
    }
    
    async function createAnonymousCollection() {
      const title = document.getElementById('title').value.trim();
      const description = document.getElementById('description').value.trim();
      
      if (!title) {
        alert('Please enter a collection title');
        return;
      }
      
      const submitBtn = document.getElementById('submit-btn');
      submitBtn.textContent = 'Creating...';
      submitBtn.disabled = true;
      
      // Generate slug from title
      const slug = title.toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '');
      
      // Get selected tags
      const selectedTags = Array.from(document.querySelectorAll('input[name="tags"]:checked'))
        .map(cb => cb.value);
      
      // Save to localStorage for anonymous user
      const anonymousSession = window.anonymousSession;
      const collection = {
        id: `anon_${Date.now()}`,
        title: title,
        description: description,
        slug: slug,
        tags: selectedTags,
        items: [],
        created_at: new Date().toISOString(),
        is_anonymous: true
      };
      
      anonymousSession.saveAnonymousCollection(collection);
      console.log('Anonymous collection saved:', collection);
      
      // Redirect to edit page
      window.location.href = `/edit/anonymous/${slug}`;
    }
</script>

<style>
  .create-flow {
    max-width: 600px;
    margin: 0 auto;
  }
  
  .subtitle {
    text-align: center;
    color: var(--color-text-secondary);
    margin-bottom: 32px;
  }
  
  .tag-selection {
    margin-bottom: 20px;
  }
  
  .tag-selection label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--color-text);
  }
  
  .tag-options {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }
  
  .tag-option {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 6px 12px;
    border: 1.5px solid var(--color-border);
    border-radius: 16px;
    background: var(--color-background-secondary);
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 13px;
  }
  
  .tag-option:hover {
    border-color: var(--color-accent);
    background: rgb(37 99 235 / 0.05);
  }
  
  .tag-option input {
    margin: 0;
  }
  
  .tag-option input:checked + span {
    color: var(--color-accent);
    font-weight: 500;
  }

    .tag-checkbox:checked + .tag-label {
      background-color: var(--color-primary);
      color: white;
      border-color: var(--color-primary);
    }
    
    /* Auth Nudge Styles */
    .auth-nudge {
      background: var(--color-background-secondary);
      border: 1.5px solid var(--color-border);
      border-radius: var(--radius);
      padding: 32px;
      text-align: center;
      margin-bottom: 24px;
    }
    
    .nudge-icon {
      font-size: 48px;
      margin-bottom: 16px;
    }
    
    .auth-nudge h3 {
      margin: 0 0 12px 0;
      color: var(--color-text);
      font-size: 20px;
      font-weight: 600;
    }
    
    .auth-nudge p {
      margin: 0 0 24px 0;
      color: var(--color-text-secondary);
      line-height: 1.5;
    }
    
    .nudge-actions {
      display: flex;
      gap: 12px;
      justify-content: center;
      flex-wrap: wrap;
    }
    
    .nudge-actions .btn-primary {
      background: var(--color-primary);
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: var(--radius);
      font-weight: 500;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    
    .nudge-actions .btn-primary:hover {
      background: var(--color-primary-hover);
    }
    
    .nudge-actions .btn-secondary {
      background: transparent;
      color: var(--color-text);
      border: 1.5px solid var(--color-border);
      padding: 12px 24px;
      border-radius: var(--radius);
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .nudge-actions .btn-secondary:hover {
      background: var(--color-background-secondary);
      border-color: var(--color-text);
    }
</style> 