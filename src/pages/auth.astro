---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Authentication - TypaVibe">
  <main>
    <div class="auth-container">
      <h1>üîê Welcome to TypaVibe</h1>
      <p class="subtitle">Create an account or sign in to save your collections</p>
      
      <!-- Google Auth Section -->
      <div class="auth-section">
        <h3>üöÄ Quick Sign In</h3>
        <p>Sign in with your Google account</p>
        <button id="google-auth-btn" class="btn-google">
          <svg class="google-icon" viewBox="0 0 24 24">
            <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
            <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
            <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
            <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
          </svg>
          Continue with Google
        </button>
      </div>
      
      <div class="divider">
        <span>or</span>
      </div>
      
      <!-- Email Auth Section -->
      <div class="auth-section">
        <h3>üìß Sign in with Email</h3>
        
        <!-- OTP Flow -->
        <div id="otp-flow">
          <div class="step" id="email-step">
            <label>Email Address</label>
            <input id="email-input" type="email" placeholder="Enter your email" />
            <button onclick="sendOTP()" class="btn-primary">Send Code</button>
          </div>
          
          <div class="step" id="code-step" style="display: none;">
            <label>Enter 6-digit code</label>
            <div class="otp-inputs">
              <input type="text" maxlength="1" class="otp-input" data-index="0" />
              <input type="text" maxlength="1" class="otp-input" data-index="1" />
              <input type="text" maxlength="1" class="otp-input" data-index="2" />
              <input type="text" maxlength="1" class="otp-input" data-index="3" />
              <input type="text" maxlength="1" class="otp-input" data-index="4" />
              <input type="text" maxlength="1" class="otp-input" data-index="5" />
            </div>
            <div class="otp-timer">
              <span id="timer-text">Code expires in <span id="timer">60</span>s</span>
              <button id="resend-btn" onclick="sendOTP()" style="display: none;">Resend Code</button>
            </div>
            <button onclick="verifyOTP()" class="btn-primary">Verify Code</button>
            <button onclick="backToEmail()" class="btn-secondary">Back</button>
          </div>
        </div>
        
        <!-- Magic Link Flow -->
        <div id="magic-link-flow" style="display: none;">
          <label>Email Address</label>
          <input id="magic-email" type="email" placeholder="Enter your email" />
          <button onclick="sendMagicLink()" class="btn-primary">Send Magic Link</button>
          <p class="help-text">We'll send you a link to sign in instantly</p>
        </div>
        
        <button onclick="toggleAuthMethod()" class="btn-secondary toggle-btn">
          <span id="toggle-text">Use Magic Link instead</span>
        </button>
      </div>
      
      <!-- Back to Home -->
      <div class="back-link">
        <a href="/">‚Üê Back to Home</a>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from '../lib/supabase.js';
  
  let currentAuthMethod = 'otp'; // 'magic-link' or 'otp'
  let otpTimer = null;
  let countdown = 60;
  
  // Google Auth
  document.getElementById('google-auth-btn').addEventListener('click', async () => {
    try {
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`
        }
      });
      
      if (error) {
        console.error('Google auth error:', error);
        alert('Error signing in with Google: ' + error.message);
      }
    } catch (error) {
      console.error('Google auth error:', error);
      alert('Error signing in with Google: ' + error.message);
    }
  });
  
  // Toggle between OTP and Magic Link
  function toggleAuthMethod() {
    const otpFlow = document.getElementById('otp-flow');
    const magicFlow = document.getElementById('magic-link-flow');
    const toggleText = document.getElementById('toggle-text');
    
    if (currentAuthMethod === 'magic-link') {
      otpFlow.style.display = 'block';
      magicFlow.style.display = 'none';
      toggleText.textContent = 'Use Magic Link instead';
      currentAuthMethod = 'otp';
    } else {
      otpFlow.style.display = 'none';
      magicFlow.style.display = 'block';
      toggleText.textContent = 'Use OTP instead';
      currentAuthMethod = 'magic-link';
    }
  }
  
  // Magic Link
  async function sendMagicLink() {
    const email = document.getElementById('magic-email').value;
    
    if (!email) {
      alert('Please enter your email address');
      return;
    }
    
    try {
      const { error } = await supabase.auth.signInWithOtp({
        email: email,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/callback`
        }
      });
      
      if (error) {
        alert('Error sending magic link: ' + error.message);
      } else {
        alert('Magic link sent! Check your email and click the link to sign in.');
      }
    } catch (error) {
      alert('Error sending magic link: ' + error.message);
    }
  }
  
  // OTP Functions
  async function sendOTP() {
    const email = document.getElementById('email-input').value;
    
    if (!email) {
      alert('Please enter your email address');
      return;
    }
    
    console.log('Sending OTP to:', email);
    
    try {
      // Try the explicit OTP method
      const { data, error } = await supabase.auth.signInWithOtp({
        email: email,
        options: {
          shouldCreateUser: true,
          type: 'email'
        }
      });
      
      console.log('OTP response:', { data, error });
      
      if (error) {
        console.error('OTP error:', error);
        
        // If the first method fails, try alternative approach
        if (error.message.includes('magic link') || error.message.includes('not configured')) {
          console.log('Trying alternative OTP method...');
          
          const { data: altData, error: altError } = await supabase.auth.signInWithOtp({
            email: email,
            options: {
              shouldCreateUser: true
            }
          });
          
          if (altError) {
            console.error('Alternative OTP error:', altError);
            alert('Error sending OTP: ' + altError.message);
          } else {
            console.log('Alternative OTP sent successfully');
            // Show code input
            document.getElementById('email-step').style.display = 'none';
            document.getElementById('code-step').style.display = 'block';
            
            // Start timer
            startOTPTimer();
            
            // Focus first OTP input
            document.querySelector('.otp-input').focus();
          }
        } else {
          alert('Error sending OTP: ' + error.message);
        }
      } else {
        console.log('OTP sent successfully');
        // Show code input
        document.getElementById('email-step').style.display = 'none';
        document.getElementById('code-step').style.display = 'block';
        
        // Start timer
        startOTPTimer();
        
        // Focus first OTP input
        document.querySelector('.otp-input').focus();
      }
    } catch (error) {
      console.error('OTP catch error:', error);
      alert('Error sending OTP: ' + error.message);
    }
  }
  
  function startOTPTimer() {
    countdown = 60;
    const timerElement = document.getElementById('timer');
    const timerText = document.getElementById('timer-text');
    const resendBtn = document.getElementById('resend-btn');
    
    timerText.style.display = 'inline';
    resendBtn.style.display = 'none';
    
    otpTimer = setInterval(() => {
      countdown--;
      timerElement.textContent = countdown;
      
      if (countdown <= 0) {
        clearInterval(otpTimer);
        timerText.style.display = 'none';
        resendBtn.style.display = 'inline';
      }
    }, 1000);
  }
  
  async function verifyOTP() {
    const otpInputs = document.querySelectorAll('.otp-input');
    const code = Array.from(otpInputs).map(input => input.value).join('');
    
    if (code.length !== 6) {
      alert('Please enter the 6-digit code');
      return;
    }
    
    const email = document.getElementById('email-input').value;
    
    try {
      const { data, error } = await supabase.auth.verifyOtp({
        email: email,
        token: code,
        type: 'email'
      });
      
      if (error) {
        alert('Invalid code. Please try again.');
      } else {
        // Success - redirect to callback
        window.location.href = '/auth/callback';
      }
    } catch (error) {
      alert('Error verifying code: ' + error.message);
    }
  }
  
  function backToEmail() {
    document.getElementById('email-step').style.display = 'block';
    document.getElementById('code-step').style.display = 'none';
    
    if (otpTimer) {
      clearInterval(otpTimer);
    }
  }
  
  // OTP Input handling
  document.querySelectorAll('.otp-input').forEach((input, index) => {
    input.addEventListener('input', (e) => {
      if (e.target.value.length === 1) {
        // Move to next input
        const nextInput = document.querySelector(`[data-index="${index + 1}"]`);
        if (nextInput) {
          nextInput.focus();
        }
      }
    });
    
    input.addEventListener('keydown', (e) => {
      if (e.key === 'Backspace' && e.target.value === '') {
        // Move to previous input
        const prevInput = document.querySelector(`[data-index="${index - 1}"]`);
        if (prevInput) {
          prevInput.focus();
        }
      }
    });
  });
  
  // Make functions globally accessible
  window.toggleAuthMethod = toggleAuthMethod;
  window.sendMagicLink = sendMagicLink;
  window.sendOTP = sendOTP;
  window.verifyOTP = verifyOTP;
  window.backToEmail = backToEmail;
</script>

<style>
  .auth-container {
    max-width: 400px;
    margin: 0 auto;
    padding: 32px 20px;
  }
  
  .auth-container h1 {
    text-align: center;
    margin-bottom: 8px;
  }
  
  .subtitle {
    text-align: center;
    color: var(--color-text-secondary);
    margin-bottom: 32px;
  }
  
  .auth-section {
    margin-bottom: 32px;
  }
  
  .auth-section h3 {
    margin: 0 0 8px 0;
    font-size: 18px;
    font-weight: 600;
  }
  
  .auth-section p {
    margin: 0 0 16px 0;
    color: var(--color-text-secondary);
    font-size: 14px;
  }
  
  .btn-google {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    padding: 12px 16px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius);
    background: var(--color-background);
    color: var(--color-text);
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .btn-google:hover {
    border-color: var(--color-accent);
    background: var(--color-background-secondary);
  }
  
  .google-icon {
    width: 20px;
    height: 20px;
  }
  
  .divider {
    text-align: center;
    margin: 24px 0;
    position: relative;
  }
  
  .divider::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: var(--color-border);
  }
  
  .divider span {
    background: var(--color-background);
    padding: 0 16px;
    color: var(--color-text-secondary);
    font-size: 14px;
  }
  
  .step {
    margin-bottom: 16px;
  }
  
  .step label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
  }
  
  .step input {
    width: 100%;
    padding: 12px 16px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius-sm);
    background: var(--color-background);
    color: var(--color-text);
    font-size: 16px;
    margin-bottom: 16px;
  }
  
  .step input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 0 3px rgb(37 99 235 / 0.1);
  }
  
  .otp-inputs {
    display: flex;
    gap: 8px;
    margin-bottom: 16px;
    justify-content: center;
  }
  
  .otp-input {
    width: 50px !important;
    height: 50px;
    text-align: center;
    font-size: 18px;
    font-weight: 600;
  }
  
  .otp-timer {
    text-align: center;
    margin-bottom: 16px;
    font-size: 14px;
    color: var(--color-text-secondary);
  }
  
  .help-text {
    font-size: 13px;
    color: var(--color-text-secondary);
    margin-top: 8px;
  }
  
  .toggle-btn {
    width: 100%;
    margin-top: 12px;
    font-size: 14px;
  }
  
  .back-link {
    text-align: center;
    margin-top: 32px;
  }
  
  .back-link a {
    color: var(--color-text-secondary);
    text-decoration: none;
    font-size: 14px;
  }
  
  .back-link a:hover {
    color: var(--color-text);
  }
</style> 