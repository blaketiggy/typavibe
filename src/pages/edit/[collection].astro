---
import Layout from '../../layouts/Layout.astro';

const { collection } = Astro.params;
---

<Layout title="Edit Collection - TypaVibe">
  <main>
    <header>
      <h1 id="edit-title">Edit Collection</h1>
    </header>
    
    <!-- Simple collection details -->
    <div style="margin-bottom: 32px;">
      <h2 id="collection-title">Loading...</h2>
      <p id="collection-description" style="color: var(--color-text-secondary);">Loading...</p>
    </div>
    
    <!-- Simple add item section -->
    <section class="add-item-section">
      <h2>Add Items</h2>
      <form id="add-item-form">
        <div class="form-row">
          <input 
            id="item-url" 
            placeholder="Product URL" 
            type="url" 
            required 
          />
          <input 
            id="item-title" 
            placeholder="Item title" 
            required 
          />
        </div>
        <div class="form-row">
          <textarea 
            id="item-description" 
            placeholder="Description (optional)" 
            rows="2"
          ></textarea>
          <input 
            id="item-price" 
            placeholder="Price (optional)" 
            type="text"
            pattern="^\$?\d+(\.\d{2})?$"
          />
        </div>
        <button type="submit">Add Item</button>
      </form>
    </section>
    
    <!-- Items list appears here -->
    <div id="items-list" style="margin-top: 32px;">
      <p style="text-align: center; color: var(--color-text-secondary);">No items yet. Add your first item above!</p>
    </div>
    
    <div style="margin-top: 48px; text-align: center;">
      <button id="publish-btn" class="btn-primary">
        ðŸš€ Publish & Share
      </button>
      <button onclick="window.location.href='/'" class="btn-secondary" style="margin-left: 12px;">
        Back to Home
      </button>
    </div>
  </main>
</Layout>

<script>
  import { anonymousSession } from '../../lib/anonymous.js';
  
  let currentCollection = null;
  
  // Load collection data
  function loadCollection() {
    // Get collection slug from URL path
    const pathParts = window.location.pathname.split('/');
    const collection = pathParts[pathParts.length - 1];
    
    console.log('Collection slug from URL:', collection);
    console.log('All path parts:', pathParts);
    
    const anonCollection = anonymousSession.getCollectionBySlug(collection);
    console.log('Anonymous session result:', anonCollection);
    
    if (anonCollection) {
      currentCollection = anonCollection;
      console.log('Found collection:', anonCollection);
      
      // Show collection details
      document.getElementById('collection-title').textContent = anonCollection.title;
      document.getElementById('collection-description').textContent = anonCollection.description;
      document.getElementById('edit-title').textContent = `Edit: ${anonCollection.title}`;
      
      // Load existing items
      loadItems();
    } else {
      console.log('Collection not found for slug:', collection);
      console.log('Available collections:', anonymousSession.getAnonymousCollections());
      alert('Collection not found!');
      window.location.href = '/';
    }
  }
  
  function loadItems() {
    console.log('loadItems called');
    const itemsContainer = document.getElementById('items-list');
    console.log('Items container:', itemsContainer);
    console.log('Current collection:', currentCollection);
    
    if (currentCollection.items && currentCollection.items.length > 0) {
      console.log('Items found:', currentCollection.items);
      itemsContainer.innerHTML = currentCollection.items.map((item, index) => `
        <div class="item-display">
          <div class="item-content">
            <h3><a href="${item.url}" target="_blank">${item.title}</a></h3>
            ${item.description ? `<p class="item-description">${item.description}</p>` : ''}
            ${item.price ? `<span class="item-price">${item.price}</span>` : ''}
          </div>
          <button onclick="deleteItem(${index})" class="btn-secondary delete-btn">
            Delete
          </button>
        </div>
      `).join('');
    } else {
      console.log('No items found');
      itemsContainer.innerHTML = '<p style="text-align: center; color: var(--color-text-secondary);">No items yet. Add your first item above!</p>';
    }
  }
  
  function deleteItem(index) {
    if (confirm('Delete this item?')) {
      currentCollection.items.splice(index, 1);
      anonymousSession.updateCollection(currentCollection.slug, {
        items: currentCollection.items
      });
      loadItems();
    }
  }
  
  function publishCollection() {
    // Get collection slug from URL path
    const pathParts = window.location.pathname.split('/');
    const collection = pathParts[pathParts.length - 1];
    window.location.href = `/demo/${collection}`;
  }
  
  // Make publishCollection globally accessible
  window.publishCollection = publishCollection;
  
  // Handle add item form
  document.getElementById('add-item-form').addEventListener('submit', (e) => {
    e.preventDefault();
    console.log('Form submitted!');
    
    // Check if collection is loaded
    if (!currentCollection) {
      console.error('Current collection is null!');
      alert('Collection not loaded. Please refresh the page.');
      return;
    }
    
    const url = document.getElementById('item-url').value;
    const title = document.getElementById('item-title').value;
    const description = document.getElementById('item-description').value;
    const price = document.getElementById('item-price').value;
    
    console.log('URL:', url);
    console.log('Title:', title);
    console.log('Description:', description);
    console.log('Price:', price);
    console.log('Current collection before adding:', currentCollection);
    
    const newItem = {
      url: url,
      title: title,
      description: description,
      price: price
    };
    
    console.log('New item:', newItem);
    
    if (!currentCollection.items) {
      currentCollection.items = [];
    }
    
    currentCollection.items.push(newItem);
    console.log('Updated collection items:', currentCollection.items);
    
    anonymousSession.updateCollection(currentCollection.slug, {
      items: currentCollection.items
    });
    
    // Clear form
    document.getElementById('add-item-form').reset();
    
    // Reload items immediately
    loadItems();
    
    // Focus back on URL input for quick adding
    document.getElementById('item-url').focus();
  });
  
  // Handle publish button click
  document.getElementById('publish-btn').addEventListener('click', publishCollection);
  
  // Load collection when page loads
  loadCollection();
</script>

<style>
  .add-item-section {
    background: var(--color-background-secondary);
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius);
    padding: 24px;
    margin-bottom: 24px;
  }
  
  .add-item-section h2 {
    margin-bottom: 16px;
  }
  
  .add-item-section form {
    display: flex;
    gap: 12px;
    align-items: flex-end;
  }
  
  .add-item-section input {
    flex: 1;
  }
  
  .add-item-section button {
    min-width: 100px;
  }

  .form-row {
    display: flex;
    gap: 12px;
    margin-bottom: 12px;
  }

  .form-row textarea {
    flex: 1;
    resize: vertical;
    min-height: 50px;
  }

  .item-display {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    background: var(--color-background-secondary);
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius-sm);
    padding: 16px;
    margin-bottom: 12px;
  }
  
  .item-content {
    flex: 1;
    margin-right: 12px;
  }
  
  .item-content h3 {
    margin: 0 0 4px 0;
  }
  
  .item-content h3 a {
    color: var(--color-accent);
    text-decoration: none;
    font-weight: 600;
  }
  
  .item-content h3 a:hover {
    text-decoration: underline;
  }
  
  .item-description {
    color: var(--color-text-secondary);
    font-size: 14px;
    margin: 0 0 4px 0;
    line-height: 1.4;
  }
  
  .item-price {
    color: var(--color-accent);
    font-weight: 600;
    font-size: 14px;
  }
  
  .delete-btn {
    padding: 8px 16px;
    font-size: 13px;
    min-height: auto;
    flex-shrink: 0;
  }
</style> 