---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Create Collection - TypaVibe">
  <main>
    <div class="create-flow">
      <h1>Add Your First Item</h1>
      <p class="subtitle">Start by adding links to your collection</p>
      
      <div id="auth-status" style="display: none; margin-bottom: 20px; padding: 12px; border-radius: 6px;"></div>
      
      <!-- Collection Info (hidden initially) -->
      <div id="collection-info" style="display: none; margin-bottom: 32px;">
        <div class="collection-header">
          <h2>Collection Details</h2>
          <p style="color: var(--color-text-secondary); margin-bottom: 20px;">Add a title and description for your collection</p>
          
          <div class="collection-form">
            <div class="form-group">
              <label for="collection-title-input">Collection Title</label>
              <input 
                id="collection-title-input" 
                type="text" 
                placeholder="Enter collection title..."
                value="Untitled Collection"
              />
            </div>
            
            <div class="form-group">
              <label for="collection-description-input">Description (optional)</label>
              <textarea 
                id="collection-description-input" 
                placeholder="Describe your collection..."
                rows="3"
              >No description</textarea>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Add Item Section -->
      <section class="add-item-section">
        <h2>Add Items</h2>
        
        <!-- Add Item Button -->
        <button id="add-item-btn" class="btn-primary">
          ➕ Add Item
        </button>
        
        <!-- Step-by-step form (hidden initially) -->
        <div id="add-item-form" class="step-form" style="display: none;">
          <div class="step" id="step-url">
            <label>Product URL</label>
            <input 
              id="item-url" 
              placeholder="Paste product URL here..." 
              type="url" 
              required 
            />
            <div class="step-buttons">
              <button type="button" class="btn-secondary" onclick="cancelAddItem()">Cancel</button>
              <button type="button" class="btn-primary" onclick="nextStep('title')">Next</button>
            </div>
          </div>
          
          <div class="step" id="step-title" style="display: none;">
            <label>Item Title (optional)</label>
            <input 
              id="item-title" 
              placeholder="Leave blank to use website title" 
            />
            <div class="step-buttons">
              <button type="button" class="btn-secondary" onclick="prevStep('url')">Back</button>
              <button type="button" class="btn-primary" onclick="nextStep('notes')">Next</button>
            </div>
          </div>
          
          <div class="step" id="step-notes" style="display: none;">
            <label>Notes (optional)</label>
            <textarea 
              id="item-notes" 
              placeholder="Add any notes about this item..."
              rows="3"
            ></textarea>
            <div class="step-buttons">
              <button type="button" class="btn-secondary" onclick="prevStep('title')">Back</button>
              <button type="button" class="btn-primary" onclick="nextStep('price')">Next</button>
            </div>
          </div>
          
          <div class="step" id="step-price" style="display: none;">
            <label>Price (optional)</label>
            <input 
              id="item-price" 
              placeholder="e.g., $29.99" 
              type="text"
            />
            <div class="step-buttons">
              <button type="button" class="btn-secondary" onclick="prevStep('notes')">Back</button>
              <button type="button" class="btn-primary" onclick="addItem()">Add Item</button>
            </div>
          </div>
        </div>
      </section>
      
      <!-- Items list appears here -->
      <div id="items-list" style="margin-top: 32px;">
        <p style="text-align: center; color: var(--color-text-secondary);">No items yet. Add your first item above!</p>
      </div>
      
      <div style="margin-top: 48px; text-align: center;">
        <button id="next-step-btn" class="btn-primary" style="display: none;">
          Next: Review & Publish
        </button>
        <button id="publish-btn" class="btn-primary" style="display: none;">
          🚀 Publish & Share
        </button>
        <button onclick="window.location.href='/'" class="btn-secondary" style="margin-left: 12px;">
          Back to Home
        </button>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from '../lib/supabase.js';
  import { anonymousSession } from '../lib/anonymous.js';
  
  let currentUser = null;
  let currentCollection = null;
  let authChecked = false;
  
  // Make anonymousSession globally accessible
  window.anonymousSession = anonymousSession;
  
  // Initialize page
  function initializePage() {
    console.log('Initializing create page...');
    
    // Initialize auth check
    checkAuth();
  }
  
  // Check if user is authenticated
  async function checkAuth() {
    try {
      console.log('Checking authentication...');
      
      // First check if we have a session
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      console.log('Session check:', { session: !!session, error: sessionError });
      
      if (sessionError) {
        console.error('Session error:', sessionError);
        // Continue as anonymous user
        currentUser = null;
        authChecked = true;
        showAuthStatus('ℹ️ Creating anonymous collection', 'info');
        return;
      }
      
      // Then get the user
      const { data: { user }, error } = await supabase.auth.getUser();
      console.log('User check:', { user: !!user, error });
      
      if (error) {
        console.error('Auth error:', error);
        // Don't show error, just continue as anonymous
        currentUser = null;
        authChecked = true;
        showAuthStatus('ℹ️ Creating anonymous collection', 'info');
        return;
      }
      
      currentUser = user;
      authChecked = true;
      
      if (user) {
        console.log('User authenticated:', user.email);
        console.log('User object:', user);
        
        // Get user profile to get username
        try {
          const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('username')
            .eq('id', user.id)
            .single();
          
          if (profile && !profileError) {
            currentUser.username = profile.username;
            console.log('User username:', profile.username);
          }
        } catch (profileError) {
          console.error('Error getting user profile:', profileError);
        }
        
        showAuthStatus(`✅ Signed in as ${user.email}`, 'success');
      } else {
        console.log('No user authenticated');
        showAuthStatus('ℹ️ Creating anonymous collection', 'info');
      }
      
    } catch (error) {
      console.error('Auth check failed:', error);
      // Don't show error, just continue as anonymous
      currentUser = null;
      authChecked = true;
      showAuthStatus('ℹ️ Creating anonymous collection', 'info');
    }
  }
  
  function showAuthStatus(message, type) {
    const statusDiv = document.getElementById('auth-status');
    statusDiv.textContent = message;
    statusDiv.style.display = 'block';
    
    // Set color based on type
    if (type === 'error') {
      statusDiv.style.background = '#fef2f2';
      statusDiv.style.color = '#dc2626';
      statusDiv.style.border = '1px solid #fecaca';
    } else if (type === 'success') {
      statusDiv.style.background = '#f0fdf4';
      statusDiv.style.color = '#16a34a';
      statusDiv.style.border = '1px solid #bbf7d0';
    } else {
      statusDiv.style.background = '#f0f9ff';
      statusDiv.style.color = '#2563eb';
      statusDiv.style.border = '1px solid #bfdbfe';
    }
  }
  
  // Add item flow functions
  function nextStep(step) {
    // Hide current step
    const currentStep = document.querySelector('.step[style*="display: block"]');
    if (currentStep) {
      currentStep.style.display = 'none';
    }
    
    // Show next step
    document.getElementById(`step-${step}`).style.display = 'block';
  }
  
  function prevStep(step) {
    // Hide current step
    const currentStep = document.querySelector('.step[style*="display: block"]');
    if (currentStep) {
      currentStep.style.display = 'none';
    }
    
    // Show previous step
    document.getElementById(`step-${step}`).style.display = 'block';
  }
  
  function cancelAddItem() {
    // Hide form
    document.getElementById('add-item-form').style.display = 'none';
    document.getElementById('add-item-btn').style.display = 'block';
    
    // Clear inputs
    document.getElementById('item-url').value = '';
    document.getElementById('item-title').value = '';
    document.getElementById('item-notes').value = '';
    document.getElementById('item-price').value = '';
    
    // Reset to first step
    document.querySelectorAll('.step').forEach(step => {
      step.style.display = 'none';
    });
    document.getElementById('step-url').style.display = 'block';
  }
  
  async function addItem() {
    const url = document.getElementById('item-url').value;
    const title = document.getElementById('item-title').value;
    const notes = document.getElementById('item-notes').value;
    const price = document.getElementById('item-price').value;
    
    if (!url) {
      alert('Please enter a URL');
      return;
    }
    
    // Extract title from URL if not provided
    let itemTitle = title;
    if (!itemTitle) {
      try {
        const urlObj = new URL(url);
        itemTitle = urlObj.hostname.replace('www.', '');
      } catch (e) {
        itemTitle = 'Untitled Item';
      }
    }
    
    const newItem = {
      url: url,
      title: itemTitle,
      description: notes,
      price: price
    };
    
    // Initialize collection if it doesn't exist
    if (!currentCollection) {
      currentCollection = {
        id: currentUser ? `user_${Date.now()}` : `anon_${Date.now()}`,
        title: 'Untitled Collection',
        description: 'No description',
        slug: null, // Don't set slug until publishing
        items: [],
        created_at: new Date().toISOString(),
        is_anonymous: !currentUser
      };
    }
    
    // Add to collection
    currentCollection.items.push(newItem);
    
    // Save based on user type
    if (!currentUser) {
      // Anonymous user - save to localStorage only
      anonymousSession.saveAnonymousCollection(currentCollection);
      console.log('Saved anonymous collection to localStorage:', currentCollection);
    } else {
      // Authenticated user - save to database
      try {
        if (!currentCollection.db_id) {
          // Create collection in database
          const { data: collection, error } = await supabase
            .from('collections')
            .insert({
              user_id: currentUser.id,
              title: currentCollection.title,
              description: currentCollection.description,
              slug: currentCollection.slug,
              is_public: true,
              is_anonymous: false
            })
            .select()
            .single();
          
          if (error) {
            console.error('Error creating collection:', error);
            alert('Error creating collection: ' + error.message);
            return;
          }
          
          currentCollection.db_id = collection.id;
        }
        
        // Add item to database
        const { error: itemError } = await supabase
          .from('collection_items')
          .insert({
            collection_id: currentCollection.db_id,
            url: newItem.url,
            title: newItem.title,
            description: newItem.description,
            price: newItem.price
          });
        
        if (itemError) {
          console.error('Error saving item:', itemError);
          alert('Error saving item: ' + itemError.message);
          return;
        }
      } catch (error) {
        console.error('Error saving item:', error);
        alert('Error saving item: ' + error.message);
        return;
      }
    }
    
    // Reset form and reload items
    cancelAddItem();
    await loadItems();
    
    // Show collection details after adding first item
    if (currentCollection.items.length === 1) {
      document.getElementById('collection-info').style.display = 'block';
      document.getElementById('next-step-btn').style.display = 'inline-block';
    }
  }
  
  async function loadItems() {
    const itemsContainer = document.getElementById('items-list');
    
    if (!currentCollection || !currentCollection.items || currentCollection.items.length === 0) {
      itemsContainer.innerHTML = `
        <p style="text-align: center; color: var(--color-text-secondary);">
          No items yet. Add your first item above!
        </p>
      `;
      return;
    }
    
    itemsContainer.innerHTML = currentCollection.items.map((item, index) => `
      <div class="item" data-index="${index}">
        <div class="item-content">
          <h3>${item.title}</h3>
          ${item.description ? `<p>${item.description}</p>` : ''}
          ${item.price ? `<span class="price">${item.price}</span>` : ''}
        </div>
        <button onclick="deleteItem(${index})" class="btn-secondary delete-btn">
          Delete
        </button>
      </div>
    `).join('');
  }
  
  async function deleteItem(itemId) {
    if (confirm('Are you sure you want to delete this item?')) {
      currentCollection.items.splice(itemId, 1);
      
      if (!currentUser) {
        // Anonymous user - update localStorage only
        anonymousSession.updateCollection(currentCollection.slug, {
          items: currentCollection.items
        });
        console.log('Updated anonymous collection in localStorage');
      } else {
        // Authenticated user - delete from database
        try {
          const { error } = await supabase
            .from('collection_items')
            .delete()
            .eq('collection_id', currentCollection.db_id)
            .eq('url', currentCollection.items[itemId].url);
          
          if (error) {
            console.error('Error deleting item:', error);
          }
        } catch (error) {
          console.error('Error deleting item:', error);
        }
      }
      
      await loadItems();
    }
  }
  
  function editCollectionInfo() {
    // Update collection with form values
    const titleInput = document.getElementById('collection-title-input');
    const descriptionInput = document.getElementById('collection-description-input');
    
    currentCollection.title = titleInput.value || 'Untitled Collection';
    currentCollection.description = descriptionInput.value || 'No description';
    
    // Save to localStorage if anonymous
    if (!currentUser) {
      anonymousSession.saveAnonymousCollection(currentCollection);
    }
    
    // Show publish button
    document.getElementById('next-step-btn').style.display = 'none';
    document.getElementById('publish-btn').style.display = 'inline-block';
  }
  
  function goToNextStep() {
    // Update collection with form values
    const titleInput = document.getElementById('collection-title-input');
    const descriptionInput = document.getElementById('collection-description-input');
    
    currentCollection.title = titleInput.value || 'Untitled Collection';
    currentCollection.description = descriptionInput.value || 'No description';
    
    // Generate unique slug for this collection
    const baseSlug = currentCollection.title.toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^a-z0-9-]/g, '');
    
    // Add timestamp to make slug unique
    const timestamp = Date.now();
    const slug = `${baseSlug}-${timestamp}`;
    currentCollection.slug = slug;
    
    // Save to localStorage if anonymous
    if (!currentUser) {
      anonymousSession.saveAnonymousCollection(currentCollection);
    }
    
    // Show publish button
    document.getElementById('next-step-btn').style.display = 'none';
    document.getElementById('publish-btn').style.display = 'inline-block';
  }
  
  async function publishCollection() {
    if (!currentCollection || currentCollection.items.length === 0) {
      alert('Please add at least one item to your collection');
      return;
    }
    
    // Generate unique slug from title with timestamp
    const baseSlug = currentCollection.title.toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^a-z0-9-]/g, '');
    
    // Add timestamp to make slug unique
    const timestamp = Date.now();
    const slug = `${baseSlug}-${timestamp}`;
    
    // Update collection with new slug
    currentCollection.slug = slug;
    
    if (!currentUser) {
      // Anonymous user - save to both localStorage and database
      try {
        // First save to localStorage for editing
        anonymousSession.saveAnonymousCollection(currentCollection);
        console.log('Saved anonymous collection to localStorage:', currentCollection);
        
        // Then save to database for public viewing
        const { data: collection, error } = await supabase
          .from('collections')
          .insert({
            title: currentCollection.title,
            description: currentCollection.description,
            slug: slug,
            is_public: true,
            is_anonymous: true,
            created_at: new Date().toISOString()
          })
          .select()
          .single();
        
        if (error) {
          console.error('Error publishing anonymous collection:', error);
          alert('Error publishing collection: ' + error.message);
          return;
        }
        
        // Add all items to database
        for (const item of currentCollection.items) {
          console.log('Saving item to database:', item);
          console.log('Collection ID for item:', collection.id);
          
          const { data: itemData, error: itemError } = await supabase
            .from('collection_items')
            .insert({
              collection_id: collection.id,
              url: item.url,
              title: item.title,
              description: item.description,
              price: item.price
            })
            .select();
          
          if (itemError) {
            console.error('Error saving item:', itemError);
            console.error('Item data that failed:', item);
          } else {
            console.log('Item saved successfully:', itemData);
          }
        }
        
        console.log('Published anonymous collection to database:', collection);
        window.location.href = `/anonymous/${slug}`;
        
      } catch (error) {
        console.error('Error publishing anonymous collection:', error);
        alert('Error publishing collection: ' + error.message);
      }
    } else {
      // Authenticated user - update database and redirect
      try {
        const { error } = await supabase
          .from('collections')
          .update({
            title: currentCollection.title,
            description: currentCollection.description,
            slug: slug
          })
          .eq('id', currentCollection.db_id);
        
        if (error) {
          console.error('Error updating collection:', error);
          alert('Error updating collection: ' + error.message);
          return;
        }
        
        // Redirect to edit page
        window.location.href = `/edit/${currentUser.username}/${slug}`;
      } catch (error) {
        console.error('Error publishing collection:', error);
        alert('Error publishing collection: ' + error.message);
      }
    }
  }
  
  // Event listeners
  document.getElementById('add-item-btn').addEventListener('click', () => {
    document.getElementById('add-item-btn').style.display = 'none';
    document.getElementById('add-item-form').style.display = 'block';
  });
  
  document.getElementById('next-step-btn').addEventListener('click', goToNextStep);
  document.getElementById('publish-btn').addEventListener('click', publishCollection);
  
  // Make functions globally accessible
  window.nextStep = nextStep;
  window.prevStep = prevStep;
  window.cancelAddItem = cancelAddItem;
  window.addItem = addItem;
  window.deleteItem = deleteItem;
  window.editCollectionInfo = editCollectionInfo;
  window.goToNextStep = goToNextStep;
  window.publishCollection = publishCollection;
  
  // Initialize page
  initializePage();
</script>

<style>
  .create-flow {
    max-width: 600px;
    margin: 0 auto;
  }
  
  .subtitle {
    text-align: center;
    color: var(--color-text-secondary);
    margin-bottom: 32px;
  }
  
  .collection-header {
    background: var(--color-background-secondary);
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius);
    padding: 20px;
    margin-bottom: 16px;
  }
  
  .collection-header h2 {
    margin: 0 0 8px 0;
    font-size: 20px;
    font-weight: 600;
  }
  
  .collection-form {
    margin-top: 16px;
  }
  
  .form-group {
    margin-bottom: 16px;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--color-text);
  }
  
  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 12px 16px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius-sm);
    background: var(--color-background);
    color: var(--color-text);
    font-size: 16px;
  }
  
  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 0 3px rgb(37 99 235 / 0.1);
  }
  
  .add-item-section {
    margin-bottom: 32px;
  }
  
  .step-form {
    margin-top: 16px;
    padding: 20px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius);
    background: var(--color-background-secondary);
  }
  
  .step {
    margin-bottom: 16px;
  }
  
  .step label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--color-text);
  }
  
  .step input,
  .step textarea {
    width: 100%;
    padding: 12px 16px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius-sm);
    background: var(--color-background);
    color: var(--color-text);
    font-size: 16px;
    margin-bottom: 16px;
  }
  
  .step input:focus,
  .step textarea:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 0 3px rgb(37 99 235 / 0.1);
  }
  
  .step-buttons {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
  }
  
  .item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius-sm);
    margin-bottom: 12px;
    background: var(--color-background-secondary);
  }
  
  .item-content h3 {
    margin: 0 0 8px 0;
    color: var(--color-text);
  }
  
  .item-content p {
    margin: 0 0 8px 0;
    color: var(--color-text-secondary);
  }
  
  .item-content .price {
    color: var(--color-accent);
    font-weight: 600;
  }
  
  .delete-btn {
    padding: 8px 16px;
    font-size: 14px;
  }
</style> 