---
import Layout from '../../layouts/Layout.astro';

const { user, collection } = Astro.params;

// For now, just show a sample collection
const title = `Sample Collection by Demo User`;
---

<Layout 
  title={title} 
  description="A sample collection for testing"
  image="/og-image.png"
  url={Astro.url.href}
  type="website"
>
  <main>
    <!-- Breadcrumbs -->
    <nav class="breadcrumbs" id="breadcrumbs">
      <a href="/" class="breadcrumb-link">Home</a>
      <span class="breadcrumb-separator">/</span>
      <span class="breadcrumb-current" id="breadcrumb-username">Loading...</span>
      <span class="breadcrumb-separator">/</span>
      <span class="breadcrumb-current" id="breadcrumb-collection">Loading...</span>
    </nav>
    
    <header>
      <h1 id="collection-title">Loading...</h1>
      <p id="collection-description">Loading...</p>
      <small id="collection-views">0 views</small>
    </header>
    
    <section class="items" id="collection-items">
      <div class="loading">Loading collection...</div>
    </section>
    
    <!-- Enhanced share buttons -->
    <div class="share-buttons" id="share-buttons" style="display: none;">
      <button class="share-btn copy-share" onclick="copyAndShare()">
        ðŸ“‹ Copy & Share
      </button>
    </div>
    
    <!-- No edit button for published collections -->
  </main>
</Layout>

<script>
  import { anonymousSession } from '../../lib/anonymous.js';
  import { supabase } from '../../lib/supabase.js';
  
  let currentCollection = null;
  let currentUser = null;
  let collectionOwner = null;
  
  // Load collection data
  async function loadCollection() {
    // Get user and collection from URL path
    const pathParts = window.location.pathname.split('/');
    const userSlug = pathParts[1]; // First part after domain
    const collectionSlug = pathParts[2]; // Second part
    
    console.log('Collection view - user:', userSlug, 'collection:', collectionSlug);
    
    // Update breadcrumbs
    updateBreadcrumbs(userSlug, collectionSlug);
    
    // Try to load from database first (for authenticated users)
    if (userSlug !== 'anonymous' && userSlug !== 'demo') {
      try {
        const { data: collection, error } = await supabase
          .from('collections')
          .select(`
            *,
            profiles!collections_user_id_fkey(username, display_name),
            collection_items(*)
          `)
          .eq('slug', collectionSlug)
          .single();
        
        if (collection && !error) {
          currentCollection = collection;
          collectionOwner = collection.profiles;
          console.log('Found collection in database:', collection);
          
          // Update page content
          updateCollectionDisplay(collection);
          return;
        }
      } catch (error) {
        console.error('Error loading from database:', error);
      }
    }
    
    // Try to load from anonymous collections
    const anonCollection = anonymousSession.getCollectionBySlug(collectionSlug);
    
    if (anonCollection) {
      // This is an anonymous collection
      currentCollection = anonCollection;
      collectionOwner = { username: 'anonymous', display_name: 'Anonymous User' };
      console.log('Found anonymous collection:', anonCollection);
      
      updateCollectionDisplay(anonCollection);
      
      // Increment view count
      anonymousSession.updateCollection(collectionSlug, {
        view_count: (anonCollection.view_count || 0) + 1
      });
      
    } else {
      // Fallback to sample collection
      currentCollection = {
        title: 'Sample Collection',
        description: 'This is a sample collection to test the design and layout.',
        view_count: 42
      };
      collectionOwner = { username: 'demo', display_name: 'Demo User' };
      
      updateCollectionDisplay(currentCollection);
    }
    
    // Show share buttons
    document.getElementById('share-buttons').style.display = 'flex';
  }
  
  function updateBreadcrumbs(userSlug, collectionSlug) {
    const usernameElement = document.getElementById('breadcrumb-username');
    const collectionElement = document.getElementById('breadcrumb-collection');
    
    // Set username breadcrumb
    if (userSlug === 'anonymous') {
      usernameElement.textContent = 'Anonymous';
    } else if (userSlug === 'demo') {
      usernameElement.textContent = 'Demo';
    } else {
      usernameElement.textContent = userSlug;
    }
    
    // Set collection breadcrumb
    collectionElement.textContent = collectionSlug.replace(/-/g, ' ');
  }
  
  function updateCollectionDisplay(collection) {
    // Update page title and meta tags
    document.title = `${collection.title} - TypaVibe`;
    updateMetaTags(collection);
    
    document.getElementById('collection-title').textContent = collection.title;
    document.getElementById('collection-description').textContent = collection.description;
    document.getElementById('collection-views').textContent = `${collection.view_count || 0} views`;
    
    // Load items
    const itemsContainer = document.getElementById('collection-items');
    const items = collection.collection_items || collection.items || [];
    
    if (items.length > 0) {
      itemsContainer.innerHTML = items.map(item => `
        <div class="item">
          <a href="${item.url}" target="_blank" class="item-link">
            <div class="item-content">
              <h3>${item.title}</h3>
              ${item.description ? `<p>${item.description}</p>` : ''}
              ${item.price ? `<span class="price">${item.price}</span>` : ''}
            </div>
          </a>
        </div>
      `).join('');
    } else {
      itemsContainer.innerHTML = `
        <div style="text-align: center; padding: 48px; color: var(--color-text-secondary);">
          <p>No items in this collection yet.</p>
        </div>
      `;
    }
  }
  
  function updateMetaTags(collection) {
    // Update Open Graph meta tags
    const ogTitle = document.querySelector('meta[property="og:title"]');
    const ogDescription = document.querySelector('meta[property="og:description"]');
    const twitterTitle = document.querySelector('meta[property="twitter:title"]');
    const twitterDescription = document.querySelector('meta[property="twitter:description"]');
    
    if (ogTitle) ogTitle.setAttribute('content', collection.title);
    if (ogDescription) ogDescription.setAttribute('content', collection.description);
    if (twitterTitle) twitterTitle.setAttribute('content', collection.title);
    if (twitterDescription) twitterDescription.setAttribute('content', collection.description);
  }
  
  function copyAndShare() {
    const url = window.location.href;
    const title = currentCollection?.title || 'Check out this collection';
    
    // Try Web Share API first (mobile)
    if (navigator.share) {
      navigator.share({
        title: title,
        text: `${title} on TypaVibe`,
        url: url
      }).then(() => {
        // Also copy to clipboard as backup
        copyUrlToClipboard(url);
      }).catch(() => {
        // Fallback to just copying
        copyUrlToClipboard(url);
      });
    } else {
      // Desktop: just copy to clipboard
      copyUrlToClipboard(url);
    }
  }
  
  function copyUrlToClipboard(url) {
    navigator.clipboard.writeText(url).then(() => {
      // Show success feedback
      const btn = event.target;
      const originalText = btn.textContent;
      btn.textContent = 'âœ… Copied!';
      btn.style.background = '#10b981';
      btn.style.color = 'white';
      
      setTimeout(() => {
        btn.textContent = originalText;
        btn.style.background = '';
        btn.style.color = '';
      }, 2000);
    }).catch(() => {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = url;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      
      // Show success feedback
      const btn = event.target;
      const originalText = btn.textContent;
      btn.textContent = 'âœ… Copied!';
      btn.style.background = '#10b981';
      btn.style.color = 'white';
      
      setTimeout(() => {
        btn.textContent = originalText;
        btn.style.background = '';
        btn.style.color = '';
      }, 2000);
    });
  }
  
  function editCollection() {
    // Get collection slug from URL path
    const pathParts = window.location.pathname.split('/');
    const collection = pathParts[pathParts.length - 1];
    window.location.href = `/edit/${collection}`;
  }
  
  function addItem() {
    // Get collection slug from URL path
    const pathParts = window.location.pathname.split('/');
    const collection = pathParts[pathParts.length - 1];
    window.location.href = `/edit/${collection}#add-item`;
  }

  // Load collection when page loads
  loadCollection();
  
  // Make functions globally accessible
  window.copyAndShare = copyAndShare;
  window.copyUrlToClipboard = copyUrlToClipboard;
</script>

<style>
  .item {
    background: var(--color-background-secondary);
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius-sm);
    margin-bottom: 16px;
    transition: all 0.2s ease;
    cursor: pointer;
    overflow: hidden;
  }
  
  .item:hover {
    border-color: var(--color-border-hover);
    box-shadow: var(--shadow-md);
    transform: translateY(-1px);
  }
  
  .item-link {
    display: block;
    text-decoration: none;
    color: inherit;
    padding: 20px;
  }
  
  .item-content h3 {
    margin: 0 0 8px 0;
    color: var(--color-text);
    font-weight: 600;
  }
  
  .item-content p {
    color: var(--color-text-secondary);
    margin: 0 0 8px 0;
    line-height: 1.5;
  }
  
  .item-content .price {
    color: var(--color-accent);
    font-weight: 600;
    font-size: 14px;
  }
  
  .share-buttons {
    display: flex;
    justify-content: center;
    margin-top: 32px;
  }
  
  .share-btn {
    padding: 12px 24px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius-sm);
    background: var(--color-background-secondary);
    color: var(--color-text);
    text-decoration: none;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 140px;
  }
  
  .share-btn:hover {
    border-color: var(--color-accent);
    background: var(--color-accent);
    color: white;
    transform: translateY(-1px);
  }
  
  /* Breadcrumbs */
  .breadcrumbs {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 24px;
    font-size: 14px;
    color: var(--color-text-secondary);
  }
  
  .breadcrumb-link {
    color: var(--color-accent);
    text-decoration: none;
    font-weight: 500;
  }
  
  .breadcrumb-link:hover {
    text-decoration: underline;
  }
  
  .breadcrumb-separator {
    color: var(--color-border);
  }
  
  .breadcrumb-current {
    color: var(--color-text);
    font-weight: 500;
  }
</style> 