---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Authentication - TypaVibe">
  <main>
    <div class="auth-container">
      <h1>🔐 Welcome to TypaVibe</h1>
      <p class="subtitle">Create an account or sign in to save your collections</p>
      
      <!-- Google Auth Section -->
      <div class="auth-option">
        <h3>🚀 Quick Sign In</h3>
        <p>Sign in with your Google account</p>
        <button id="google-auth-btn" class="btn-google">
          <svg class="google-icon" viewBox="0 0 24 24">
            <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
            <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
            <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
            <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
          </svg>
          Continue with Google
        </button>
      </div>
      
      <div class="auth-divider">
        <span>or</span>
      </div>
      
      <!-- Email OTP Section -->
      <div class="auth-option">
        <h3>📧 Email Sign In</h3>
        <p>Get a one-time code sent to your email</p>
        
        <form id="otp-form">
          <div class="form-group">
            <input 
              id="otp-email" 
              type="email" 
              placeholder="Enter your email" 
              required 
            />
          </div>
          
          <div class="form-group otp-code-group" style="display: none;">
            <input 
              id="otp-code" 
              type="text" 
              placeholder="Enter 6-digit code" 
              maxlength="6"
              pattern="[0-9]{6}"
            />
            <div class="otp-timer" id="otp-timer"></div>
          </div>
          
          <button type="submit" class="btn-primary" id="otp-btn">
            Send Code
          </button>
        </form>
        
        <div id="otp-message" class="auth-message" style="display: none;"></div>
      </div>
      
      <!-- Create Account Section -->
      <div class="auth-option">
        <h3>👤 Create Account</h3>
        <p>Save your collections and access them anywhere</p>
        
        <form id="auth-form">
          <div class="form-group">
            <input 
              id="username" 
              type="text" 
              placeholder="Choose a username" 
              required 
              pattern="[a-zA-Z0-9_-]{3,20}"
              title="Username must be 3-20 characters, letters, numbers, hyphens, and underscores only"
            />
            <div id="username-status" class="username-status"></div>
          </div>
          
          <div class="form-group">
            <input 
              id="email" 
              type="email" 
              placeholder="Enter your email" 
              required 
            />
          </div>
          
          <button type="submit" class="btn-primary" id="submit-btn">
            Create Account
          </button>
        </form>
        
        <div id="auth-message" class="auth-message" style="display: none;"></div>
      </div>
      
      <div class="auth-divider">
        <span>or</span>
      </div>
      
      <div class="auth-option">
        <h3>🚀 Quick Start (Anonymous)</h3>
        <p>Create collections without signing up</p>
        <button onclick="window.location.href='/create'" class="btn-secondary">
          Start Creating
        </button>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from '../lib/supabase.js';
  
  let usernameCheckTimeout;
  let isUsernameAvailable = false;
  let otpTimer = null;
  let otpCountdown = 60;
  
  // Google Auth
  document.getElementById('google-auth-btn').addEventListener('click', async () => {
    const btn = document.getElementById('google-auth-btn');
    const originalText = btn.innerHTML;
    
    try {
      btn.innerHTML = '<span>Signing in...</span>';
      btn.disabled = true;
      
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`
        }
      });
      
      if (error) {
        throw error;
      }
      
      // Redirect will happen automatically
      
    } catch (error) {
      console.error('Google auth error:', error);
      alert(`Google sign-in failed: ${error.message}`);
      btn.innerHTML = originalText;
      btn.disabled = false;
    }
  });
  
  // OTP Email Sign In
  document.getElementById('otp-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const email = document.getElementById('otp-email').value;
    const code = document.getElementById('otp-code').value;
    const messageDiv = document.getElementById('otp-message');
    const submitBtn = document.getElementById('otp-btn');
    const codeGroup = document.querySelector('.otp-code-group');
    
    try {
      if (!code) {
        // Send OTP code
        submitBtn.textContent = 'Sending...';
        submitBtn.disabled = true;
        
        const { data, error } = await supabase.auth.signInWithOtp({
          email: email,
          options: {
            emailRedirectTo: `${window.location.origin}/auth/callback`
          }
        });
        
        if (error) {
          throw error;
        }
        
        // Show code input
        codeGroup.style.display = 'block';
        submitBtn.textContent = 'Verify Code';
        
        // Start timer
        startOtpTimer();
        
        messageDiv.textContent = '✅ Code sent! Check your email.';
        messageDiv.className = 'auth-message success';
        messageDiv.style.display = 'block';
        
      } else {
        // Verify OTP code
        submitBtn.textContent = 'Verifying...';
        submitBtn.disabled = true;
        
        const { data, error } = await supabase.auth.verifyOtp({
          email: email,
          token: code,
          type: 'email'
        });
        
        if (error) {
          throw error;
        }
        
        // Success - redirect to dashboard or home
        window.location.href = '/dashboard';
      }
      
    } catch (error) {
      console.error('OTP error:', error);
      messageDiv.textContent = `❌ ${error.message}`;
      messageDiv.className = 'auth-message error';
      messageDiv.style.display = 'block';
      
      submitBtn.textContent = !code ? 'Send Code' : 'Verify Code';
      submitBtn.disabled = false;
    }
  });
  
  function startOtpTimer() {
    otpCountdown = 60;
    const timerDiv = document.getElementById('otp-timer');
    
    otpTimer = setInterval(() => {
      if (otpCountdown > 0) {
        timerDiv.textContent = `Resend in ${otpCountdown}s`;
        otpCountdown--;
      } else {
        clearInterval(otpTimer);
        timerDiv.textContent = 'Code expired';
        timerDiv.style.color = '#dc2626';
      }
    }, 1000);
  }
  
  // Username validation and availability check
  document.getElementById('username').addEventListener('input', async (e) => {
    const username = e.target.value;
    const statusDiv = document.getElementById('username-status');
    const submitBtn = document.getElementById('submit-btn');
    
    // Clear previous timeout
    clearTimeout(usernameCheckTimeout);
    
    // Basic validation
    if (username.length < 3) {
      statusDiv.innerHTML = '<span style="color: #f59e0b;">⏳ Username must be at least 3 characters</span>';
      isUsernameAvailable = false;
      submitBtn.disabled = true;
      return;
    }
    
    if (!/^[a-zA-Z0-9_-]+$/.test(username)) {
      statusDiv.innerHTML = '<span style="color: #dc2626;">❌ Username can only contain letters, numbers, hyphens, and underscores</span>';
      isUsernameAvailable = false;
      submitBtn.disabled = true;
      return;
    }
    
    // Show checking status
    statusDiv.innerHTML = '<span style="color: #f59e0b;">⏳ Checking availability...</span>';
    submitBtn.disabled = true;
    
    // Debounce the check
    usernameCheckTimeout = setTimeout(async () => {
      try {
        // Check if username exists in profiles table
        const { data, error } = await supabase
          .from('profiles')
          .select('username')
          .eq('username', username)
          .single();
        
        if (error && error.code === 'PGRST116') {
          // Username not found - available
          statusDiv.innerHTML = '<span style="color: #10b981;">✅ Username available</span>';
          isUsernameAvailable = true;
          submitBtn.disabled = false;
        } else if (data) {
          // Username found - not available
          statusDiv.innerHTML = '<span style="color: #dc2626;">❌ Username already taken</span>';
          isUsernameAvailable = false;
          submitBtn.disabled = true;
        } else {
          // Other error
          statusDiv.innerHTML = '<span style="color: #dc2626;">❌ Error checking username</span>';
          isUsernameAvailable = false;
          submitBtn.disabled = true;
        }
      } catch (error) {
        console.error('Username check error:', error);
        statusDiv.innerHTML = '<span style="color: #dc2626;">❌ Error checking username</span>';
        isUsernameAvailable = false;
        submitBtn.disabled = true;
      }
    }, 500);
  });
  
  // Create account form
  document.getElementById('auth-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!isUsernameAvailable) {
      alert('Please choose an available username');
      return;
    }
    
    const username = document.getElementById('username').value;
    const email = document.getElementById('email').value;
    const messageDiv = document.getElementById('auth-message');
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    
    try {
      submitBtn.textContent = 'Creating Account...';
      submitBtn.disabled = true;
      
      console.log('Creating account for:', { username, email });
      
      // Sign up with magic link
      const { data, error } = await supabase.auth.signInWithOtp({
        email: email,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/callback`,
          data: {
            username: username
          }
        }
      });
      
      console.log('Auth response:', { data, error });
      
      if (error) {
        throw error;
      }
      
      messageDiv.textContent = '✅ Magic link sent! Check your email to complete signup.';
      messageDiv.className = 'auth-message success';
      messageDiv.style.display = 'block';
      
      // Clear form
      document.getElementById('username').value = '';
      document.getElementById('email').value = '';
      
    } catch (error) {
      console.error('Auth error:', error);
      messageDiv.textContent = `❌ ${error.message}`;
      messageDiv.className = 'auth-message error';
      messageDiv.style.display = 'block';
    } finally {
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    }
  });
</script>

<style>
  .auth-container {
    max-width: 480px;
    margin: 0 auto;
    padding: 24px;
  }
  
  .subtitle {
    text-align: center;
    color: var(--color-text-secondary);
    margin-bottom: 32px;
  }
  
  .auth-option {
    background: var(--color-background-secondary);
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius);
    padding: 24px;
    margin-bottom: 24px;
  }
  
  .auth-option h3 {
    margin-bottom: 8px;
    font-size: 1.1rem;
  }
  
  .auth-option p {
    color: var(--color-text-secondary);
    margin-bottom: 16px;
    font-size: 0.9rem;
  }
  
  .btn-google {
    width: 100%;
    padding: 12px 16px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius-sm);
    background: white;
    color: var(--color-text);
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
  }
  
  .btn-google:hover {
    background: var(--color-background-secondary);
    border-color: var(--color-border-hover);
  }
  
  .google-icon {
    width: 20px;
    height: 20px;
  }
  
  .form-group {
    margin-bottom: 16px;
  }
  
  .form-group input {
    width: 100%;
    padding: 12px 16px;
    border: 1.5px solid var(--color-border);
    border-radius: var(--radius-sm);
    background: var(--color-background);
    color: var(--color-text);
    font-size: 16px;
    transition: all 0.2s ease;
  }
  
  .form-group input:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 0 3px rgb(37 99 235 / 0.1);
  }
  
  .otp-code-group {
    position: relative;
  }
  
  .otp-timer {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 12px;
    color: var(--color-text-secondary);
  }
  
  .username-status {
    margin-top: 4px;
    font-size: 12px;
  }
  
  .auth-message {
    margin-top: 16px;
    padding: 12px;
    border-radius: var(--radius-sm);
    font-size: 14px;
  }
  
  .auth-message.success {
    background: #f0fdf4;
    color: #16a34a;
    border: 1px solid #bbf7d0;
  }
  
  .auth-message.error {
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }
  
  .auth-divider {
    text-align: center;
    margin: 24px 0;
    position: relative;
  }
  
  .auth-divider::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: var(--color-border);
  }
  
  .auth-divider span {
    background: var(--color-background);
    padding: 0 16px;
    color: var(--color-text-secondary);
    font-size: 14px;
  }
</style> 